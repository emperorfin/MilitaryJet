package emperorfin.android.composeemailauthentication.ui.screens.authentication.uicomponents

import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Check
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.testTag
import androidx.compose.ui.res.dimensionResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.semantics.clearAndSetSemantics
import androidx.compose.ui.semantics.semantics
import androidx.compose.ui.semantics.testTag
import androidx.compose.ui.semantics.text
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.TextUnit
import androidx.compose.ui.unit.sp
import emperorfin.android.composeemailauthentication.R
import emperorfin.android.composeemailauthentication.ui.fortesting.iconContentDescription
import emperorfin.android.composeemailauthentication.ui.fortesting.iconImageVector
import emperorfin.android.composeemailauthentication.ui.fortesting.iconTintArgb
import emperorfin.android.composeemailauthentication.ui.fortesting.textColorArgb
import emperorfin.android.composeemailauthentication.ui.res.theme.ComposeEmailAuthenticationTheme
import emperorfin.android.composeemailauthentication.ui.screens.authentication.uicomponents.tags.Tags.TAG_AUTHENTICATION_PASSWORD_REQUIREMENT
import emperorfin.android.composeemailauthentication.ui.screens.authentication.uicomponents.tags.Tags.TAG_AUTHENTICATION_PASSWORD_REQUIREMENT_ICON


/**
 * @Author: Francis Nwokelo (emperorfin)
 * @Date: Tuesday 06th December, 2022.
 */


@Composable
fun Requirement(
    modifier: Modifier = Modifier,
    message: String,
    satisfied: Boolean
) {

    val iconImageVector: ImageVector = Icons.Default.Check
    val iconContentDescription: String = if (satisfied) {
        stringResource(
            id = R.string.content_description_icon_password_requirement_satisfied
        )
    } else {
        stringResource(
            id = R.string.content_description_icon_password_requirement_needed
        )
    }
    val tint: Color = if (satisfied) {
        MaterialTheme.colorScheme.primary
    } else MaterialTheme.colorScheme.onSurface.copy(alpha = COLOR_ALPHA)

    val requirementStatus: String = if (satisfied) {
        stringResource(id = R.string.password_requirement_satisfied, message)
    } else {
        stringResource(id = R.string.password_requirement_needed, message)
    }

    Row(
        modifier = Modifier
            .padding(
                all = dimensionResource(id = R.dimen.padding_all_6)
            )
//            .semantics(mergeDescendants = TRUE) {
////            this.text = AnnotatedString(requirementStatus) // Or
//                text = AnnotatedString(requirementStatus)
//                testTag = TAG_AUTHENTICATION_PASSWORD_REQUIREMENT + message
//
//                textColorArgb = tint.toArgb()
//            },
        ,verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            modifier = Modifier
                .testTag(tag = TAG_AUTHENTICATION_PASSWORD_REQUIREMENT_ICON)
                .size(
                    size = dimensionResource(id = R.dimen.size_12)
                )
                .semantics {
                    this.iconImageVector = iconImageVector
                    this.iconContentDescription = iconContentDescription
                    this.iconTintArgb = tint.toArgb()
                },
            imageVector = iconImageVector,
            contentDescription = iconContentDescription,
            tint = tint
        )

        Spacer(
            modifier = Modifier.width(
                width = dimensionResource(id = R.dimen.width_8)
            )
        )

        Text(
            modifier = Modifier
//                .clearAndSetSemantics {  },
                .testTag(tag = TAG_AUTHENTICATION_PASSWORD_REQUIREMENT + requirementStatus)
                .semantics { textColorArgb = tint.toArgb() },
            text = message,
            fontSize = FONT_SIZE_SP_12,
            color = tint
        )
    }

}

@Composable
@Preview(showBackground = TRUE)
private fun RequirementPreview() {
    ComposeEmailAuthenticationTheme {
        Requirement(
            modifier = Modifier,
            message = "message",
            satisfied = TRUE
        )
    }
}

private const val TRUE: Boolean = true

private const val COLOR_ALPHA: Float = 0.4f

private val FONT_SIZE_SP_12: TextUnit = 12.sp
